{"version":3,"file":"picker.js","sourceRoot":"","sources":["../../src/components/picker.tsx"],"names":[],"mappings":";;;;;;;;;AAAA,OAAO,KAAK,EAAE,EAAE,SAAS,EAAE,QAAQ,EAAE,MAAM,OAAO,CAAA;AAClD,OAAO,YAAoC,MAAM,qBAAqB,CAAC;AASvE,MAAM,CAAC,MAAM,UAAU,GAAG,KAAK,CAAC,UAAU,CAAC,CAAC,KAAsB,EAAE,GAAgC,EAAc,EAAE;IAChH,MAAM,CAAC,OAAO,EAAE,UAAU,CAAC,GAAG,QAAQ,CAAC,SAAS,CAAC,CAAC;IAClD,MAAM,CAAC,KAAK,EAAE,QAAQ,CAAC,GAAG,QAAQ,CAAC,EAAE,CAAC,CAAC;IAEvC,MAAM,OAAO,GAAG,GAAS,EAAE;QACvB,MAAM,QAAQ,GAAG,MAAM,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;QACzC,IAAI,CAAC,QAAQ,CAAC,EAAE,EAAE;YACd,OAAO;SACV;QAED,MAAM,IAAI,GAAG,MAAM,QAAQ,CAAC,IAAI,EAAE,CAAC;QACnC,MAAM,KAAK,GAAa,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAA;QACxC,MAAM,MAAM,GAAyB,EAAE,CAAC;QAExC,KAAK,CAAC,OAAO,CAAC,CAAC,OAAO,EAAE,GAAG,EAAE,EAAE;YAC3B,IAAI,OAAO,IAAI,EAAE,EAAE;gBACf,MAAM,CAAC,IAAI,CAAC,EAAE,IAAI,EAAE,OAAiB,EAAE,KAAK,EAAE,OAAiB,EAAC,CAAC,CAAC;aACrE;QACL,CAAC,CAAC,CAAC;QAEH,UAAU,CAAC,MAAM,CAAC,CAAC;QACnB,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAA;QACzB,KAAK,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC;IACxC,CAAC,CAAA,CAAA;IAED,MAAM,MAAM,GAAG,GAAG,EAAE;QAChB,MAAM,QAAQ,GAAG,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,KAAK,CAAC;QAC3E,QAAQ,CAAC,QAAQ,CAAC,CAAC;QACnB,KAAK,CAAC,YAAY,CAAC,QAAQ,CAAC,CAAC;IACjC,CAAC,CAAA;IAED,SAAS,CAAC,GAAG,EAAE;QACX,IAAI,CAAC,OAAO,EAAE;YACV,OAAO,EAAE,CAAC;SACb;IACL,CAAC,CAAC,CAAC;IAEH,OAAO,CACH,6BAAK,SAAS,EAAC,QAAQ;QACnB,kCAAO,KAAK,CAAC,KAAK,CAAQ;QAC1B,oBAAC,YAAY,IAAC,OAAO,EAAE,OAAO,EAAE,KAAK,EAAE,KAAK,EAAE,MAAM,EAAE,IAAI,EAAE,QAAQ,EAAE,KAAK,CAAC,YAAY,GAAiB;QACzG,gCAAQ,OAAO,EAAE,MAAM,EAAE,GAAG,EAAE,GAAG,mBAAa,CAC5C,CACT,CAAC;AACN,CAAC,CAAC,CAAC","sourcesContent":["import React, { useEffect, useState } from \"react\"\r\nimport SelectSearch, { SelectSearchOption } from 'react-select-search';\r\n\r\ninterface PickerViewProps {\r\n    path: string;\r\n    uid: string;\r\n    title: string;\r\n    onNameChange: (value) => void;\r\n}\r\n\r\nexport const PickerView = React.forwardRef((props: PickerViewProps, ref: React.MutableRefObject<any>):JSX.Element => {\r\n    const [options, setOptions] = useState(undefined);\r\n    const [value, setValue] = useState(\"\");\r\n\r\n    const getFile = async () => {\r\n        const response = await fetch(props.path);\r\n        if (!response.ok) {\r\n            return; \r\n        }\r\n\r\n        const text = await response.text();\r\n        const lines: string[] = text.split(\"\\n\")\r\n        const result: SelectSearchOption[] = [];\r\n\r\n        lines.forEach((element, idx) => {\r\n            if (element != \"\") {\r\n                result.push({ name: element as string, value: element as string});\r\n            }\r\n        });\r\n\r\n        setOptions(result);\r\n        setValue(result[0].value)\r\n        props.onNameChange(result[0].value);\r\n    }\r\n\r\n    const random = () => {\r\n        const newValue = options[Math.floor(Math.random() * options.length)].value;\r\n        setValue(newValue);\r\n        props.onNameChange(newValue);\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (!options) {\r\n            getFile();\r\n        }\r\n    });\r\n\r\n    return (\r\n        <div className=\"picker\">\r\n            <span>{props.title}</span>\r\n            <SelectSearch options={options} value={value} search={true} onChange={props.onNameChange}></SelectSearch>\r\n            <button onClick={random} ref={ref}>üêà</button>\r\n        </div>\r\n    );\r\n});\r\n"]}