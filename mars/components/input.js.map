{"version":3,"file":"input.js","sourceRoot":"","sources":["../../src/components/input.tsx"],"names":[],"mappings":"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","sourcesContent":["import React, { useState } from \"react\"\r\n\r\ninterface IInputProps {\r\n    expected: string;\r\n    validateInput: (key: string) => string | undefined;\r\n    onDone: () => void;\r\n}\r\n\r\nexport function Input(props: IInputProps): JSX.Element {\r\n    const [values, setValues] = useState([])\r\n\r\n    const handleFocus = (e: React.FocusEvent<HTMLInputElement>) => {\r\n        e.target.style.borderColor = \"green\";\r\n    };\r\n\r\n    const handleBlur = (e: React.FocusEvent<HTMLInputElement>) => {\r\n        e.target.style.borderColor = \"lightgray\";\r\n    };\r\n\r\n    const handleKeyDown = (e: React.KeyboardEvent<HTMLInputElement>) => {\r\n        e.preventDefault();\r\n        const col = +(e.currentTarget.dataset[\"id\"]);\r\n\r\n        if (e.key == \"ArrowLeft\" && col > 1) {\r\n            document.getElementById(\"box\" + (col - 1)).focus();\r\n            return;\r\n        } else if (e.key == \"ArrowRight\" && col < props.expected.length) {\r\n            document.getElementById(\"box\" + (col + 1)).focus();\r\n            return;\r\n        } else if (e.key == \"Backspace\") {\r\n            values[col - 1] = \"\";\r\n            setValues(values)\r\n            e.currentTarget.value = \"\";\r\n            return;\r\n        }\r\n\r\n        const val = props.validateInput(e.key);\r\n\r\n        if (val === undefined) {\r\n            return;\r\n        }\r\n\r\n        values[col - 1] = val;\r\n        e.currentTarget.value = val;\r\n        setValues(values);\r\n\r\n        if (done()) {\r\n            props.onDone();\r\n            return\r\n        }\r\n\r\n        if (col != props.expected.length) {\r\n            document.getElementById(\"box\" + (col + 1)).focus();\r\n        }\r\n    };\r\n\r\n    const done = () => {\r\n        for (let i = 0; i < props.expected.length; i++) {\r\n            if (props.expected[i] !== values[i]) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    const renderInputs = () => {\r\n        const inputs = []\r\n\r\n        for (let i = 1; i <= props.expected.length; i++) {\r\n            inputs.push(\r\n                <input\r\n                    id={ \"box\" + i }\r\n                    style={{ gridColumn: i }} \r\n                    onFocus={handleFocus}\r\n                    onBlur={handleBlur}\r\n                    onKeyDown={handleKeyDown}\r\n                    readOnly={true}\r\n                    value={values[i - 1]}\r\n                    type=\"text\"\r\n                    data-id={i}></input>);\r\n        }\r\n\r\n        return inputs\r\n    }\r\n\r\n    return (\r\n        <div className=\"inp\" style={{ gridColumnStart: 1, gridColumnEnd: \"span \" + props.expected.length }}>\r\n            { renderInputs() }\r\n        </div>);\r\n}\r\n\r\n\r\n\r\n"]}