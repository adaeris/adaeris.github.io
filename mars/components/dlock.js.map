{"version":3,"file":"dlock.js","sourceRoot":"","sources":["../../src/components/dlock.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAK,MAAM,OAAO,CAAA;AACzB,OAAO,EAAE,KAAK,EAAE,MAAM,SAAS,CAAC;AAEhC,OAAO,UAAU,MAAM,0BAA0B,CAAA;AAOjD,MAAM,UAAU,iBAAiB,CAAC,KAA8B;IAC5D,MAAM,aAAa,GAAG,CAAC,GAAW,EAAE,EAAE;QAClC,IAAI,GAAG,CAAC,WAAW,EAAE,IAAI,GAAG,EAAE;YAC1B,OAAO,GAAG,CAAC;SACd;QAED,IAAI,GAAG,CAAC,WAAW,EAAE,IAAI,GAAG,EAAE;YAC1B,OAAO,GAAG,CAAC;SACd;QAED,IAAI,GAAG,CAAC,WAAW,EAAE,IAAI,GAAG,EAAE;YAC1B,OAAO,GAAG,CAAC;SACd;QAED,IAAI,GAAG,CAAC,WAAW,EAAE,IAAI,GAAG,EAAE;YAC1B,OAAO,GAAG,CAAC;SACd;QAED,IAAI,CAAC,CAAC,GAAG,EAAE;YACP,OAAO,SAAS,CAAC;SACpB;QAED,OAAO,GAAG,CAAC;IACf,CAAC,CAAA;IAED,OAAO,CACH,6BAAK,SAAS,EAAC,MAAM;QACjB,6BAAK,SAAS,EAAC,KAAK;YAChB,sDAA4B;YAC5B,uGAA4E;YAC5E,yOAA8M,CAC5M;QACN;YACI,6BAAK,GAAG,EAAE,UAAU,EAAE,KAAK,EAAE,EAAE,MAAM,EAAE,MAAM,EAAE,OAAO,EAAE,OAAO,EAAE,QAAQ,EAAE,OAAO,EAAE,KAAK,EAAE,KAAK,EAAE,GAAQ,CACxG;QACN,6BAAK,SAAS,EAAC,QAAQ,EAAC,KAAK,EAAE,EAAE,SAAS,EAAE,QAAQ,EAAE;YAClD;gBAAG,8BAAM,KAAK,EAAE,EAAE,eAAe,EAAE,SAAS,EAAE;oBAAE,wCAAkB;8BAAS;;gBAAC,8BAAM,KAAK,EAAE,EAAE,eAAe,EAAE,SAAS,EAAE;oBAAE,wCAAkB;8BAAS;;gBAAC,8BAAM,KAAK,EAAE,EAAE,eAAe,EAAE,SAAS,EAAC;oBAAE,wCAAkB;8BAAS;;gBAAC,8BAAM,KAAK,EAAE,EAAE,eAAe,EAAE,SAAS,EAAE;oBAAE,wCAAkB;8BAAS,CAAI,CACvS;QACN,oBAAC,KAAK,IAAC,QAAQ,EAAC,gCAAO,EAAC,MAAM,EAAE,KAAK,CAAC,MAAM,EAAE,aAAa,EAAE,aAAa,GAAU;QACpF;YACI;;gBAA2B,2BAAG,IAAI,EAAC,GAAG,EAAC,OAAO,EAAE,KAAK,CAAC,MAAM,cAAa;wCAAyB,CAChG,CACJ,CAAC,CAAC;AAChB,CAAC","sourcesContent":["import React from \"react\"\r\nimport { Input } from \"./input\";\r\n\r\nimport Directions from \"../images/directions.jpg\"\r\n\r\ninterface IDirectionLockViewProps {\r\n    onBack: () => void;\r\n    onDone: () => void;\r\n}\r\n\r\nexport function DirectionLockView(props: IDirectionLockViewProps): JSX.Element {\r\n    const validateInput = (key: string) => {\r\n        if (key.toUpperCase() == \"W\") {\r\n            return \"↑\";\r\n        }\r\n\r\n        if (key.toUpperCase() == \"S\") {\r\n            return \"↓\";\r\n        }\r\n\r\n        if (key.toUpperCase() == \"A\") {\r\n            return \"←\";\r\n        }\r\n\r\n        if (key.toUpperCase() == \"D\") {\r\n            return \"→\";\r\n        }\r\n\r\n        if (!+key) {\r\n            return undefined;\r\n        }\r\n\r\n        return key;\r\n    }\r\n\r\n    return (\r\n        <div className=\"lock\">\r\n            <div className=\"txt\">\r\n                <h1>Trajectory plotting</h1>\r\n                <p>You need to plot the trajectory of the rocket you will use to escape.</p>\r\n                <p>Start by finding the asteroid belt in the night sky. Then try to find Earth. You don't want to head towards Saturn. Jupiter is also not your destination. You just want to get back to the blue planet.</p>\r\n            </div>\r\n            <div>\r\n                <img src={Directions} style={{ margin: \"auto\", display: \"block\", maxWidth: \"600px\", width: \"90%\" }}></img>\r\n            </div>\r\n            <div className=\"legend\" style={{ textAlign: \"center\" }}>\r\n                <p><span style={{ backgroundColor: \"#ffffff\" }}><strong>W</strong> ↑</span> <span style={{ backgroundColor: \"#ffffff\" }}><strong>A</strong> ←</span> <span style={{ backgroundColor: \"#ffffff\"}}><strong>S</strong> ↓</span> <span style={{ backgroundColor: \"#ffffff\" }}><strong>D</strong> →</span></p>\r\n            </div>\r\n            <Input expected=\"↑→↓←→\" onDone={props.onDone} validateInput={validateInput}></Input>\r\n            <div>\r\n                <p>... or you could always <a href=\"#\" onClick={props.onBack}>go back</a> and try again later.</p>\r\n            </div>\r\n        </div>);\r\n}\r\n"]}